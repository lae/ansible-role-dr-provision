---

- command: drpcli contents exists drp-community-content
  register: drp_community_content_result
  ignore_errors: True

- name: load drp-community-content
  shell: "drpcli contents create \"{{ provision_content_dir }}/{{provision_content_release_tag}}/drp-community-content.yaml\""
  when: verify_provision_content_results.stdout | search("OK") and drp_community_content_result.rc != 0

- name: load drp-community-content
  shell: "drpcli contents update drp-community-content \"{{ provision_content_dir }}/{{provision_content_release_tag}}/drp-community-content.yaml\""
  when: verify_provision_content_results.stdout | search("OK") and drp_community_content_result.rc == 0

- name: config dr-provision admin user
  shell: "drpcli users create {{ provision_admin_user }}"
  args:
    creates: "{{ provision_var_dir }}/digitalrebar/users/{{ provision_admin_user }}.json"

- command: "drpcli -U {{ provision_admin_user }} -P \"{{ provision_admin_password }}\" prefs list >/dev/null 2>&1"
  register: admin_password_set
  ignore_errors: True

- name: config dr-provision user api password
  command: "drpcli users password {{ provision_admin_user }} \"{{ provision_admin_password }}\""
  register: provision_password_results
  when: admin_password_set.rc != 0
  changed_when: provision_password_results.rc == 0
  failed_when: provision_password_results.rc != 0

- name: config shell environment with dr-provision api credentials
  copy:
    content: "#!/bin/bash\nexport RS_KEY=\"{{ provision_admin_user }}:{{ provision_admin_password }}\""
    dest: "/etc/profile.d/dr-provision.sh"
    mode: 0755

#- name: remove default rocketskates user if different from admin user
#  shell: "drpcli users destroy rocketskates"
#  args:
#    removes: "{{ provision_var_dir }}/digitalrebar/users/rocketskates.json"
#  when: provision_admin_user != "rocketskates"

- name: add drpcli autocomplete definitions
  shell: "drpcli autocomplete /etc/bash_completion.d/drpcli"
  args:
    creates: "/etc/bash_completion.d/drpcli"

- name: generate drpcli token
  shell: "drpcli -U {{ provision_admin_user }} -P \"{{ provision_admin_password }}\" users token {{ provision_admin_user }}"
  register: provision_token

- name: config dr-provision preferences
  copy:
    content: '{"Meta":{},"Name":"{{ item.key }}","Val":"{{ item.value }}"}'
    dest: "{{ provision_var_dir }}/digitalrebar/preferences/{{ item.key }}.json"
  with_dict: "{{ provision_preferences }}"
  notify:
    - restart dr-provision

- name: get boot environments
  shell: "drpcli  -U {{ provision_admin_user }} -P \"{{ provision_admin_password }}\" bootenvs uploadiso {{ item }}"
  with_items: "{{ provision_content_bootenvs }}"

